diff --git a/node_modules/react-native-quick-base64/src/index.ts b/node_modules/react-native-quick-base64/src/index.ts
index 4a75fe6..f2947a3 100644
--- a/node_modules/react-native-quick-base64/src/index.ts
+++ b/node_modules/react-native-quick-base64/src/index.ts
@@ -1,6 +1,9 @@
 import { NativeModules } from 'react-native'
 import fallback from 'base64-js'
 
+import * as MyUtils from '../../../src/myGeneralLibrary';
+const LIBN = '(ppclient) (RNQB64)';
+
 const Base64Module = NativeModules.QuickBase64
 
 if (Base64Module && typeof Base64Module.install === 'function') {
@@ -94,10 +97,24 @@ export function fromByteArray(
 }
 
 export function btoa(data: string): string {
+  MyUtils.LogSys(LIBN, 1, 'btoa called');
   const ab = stringToArrayBuffer(data)
   if (typeof base64FromArrayBuffer !== 'undefined') {
+    MyUtils.LogSys(LIBN, 1, 'Using base64FromArrayBuffer');
+    return base64FromArrayBuffer(ab)
+  } else {
+    MyUtils.LogSys(LIBN, 1, 'Using fromByteArray');
+    return fallback.fromByteArray(new Uint8Array(ab))
+  }
+}
+
+export function btoa_ab(ab: ArrayBuffer): string {
+  MyUtils.LogSys(LIBN, 1, 'btoa_ab called');
+  if (typeof base64FromArrayBuffer !== 'undefined') {
+    MyUtils.LogSys(LIBN, 1, 'Using base64FromArrayBuffer');
     return base64FromArrayBuffer(ab)
   } else {
+    MyUtils.LogSys(LIBN, 1, 'Using fromByteArray');
     return fallback.fromByteArray(new Uint8Array(ab))
   }
 }
