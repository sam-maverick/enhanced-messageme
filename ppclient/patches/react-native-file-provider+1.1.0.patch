diff --git a/node_modules/react-native-file-provider/android/build.gradle b/node_modules/react-native-file-provider/android/build.gradle
index 7e9c5a1..b310846 100644
--- a/node_modules/react-native-file-provider/android/build.gradle
+++ b/node_modules/react-native-file-provider/android/build.gradle
@@ -2,12 +2,11 @@
 apply plugin: 'com.android.library'
 
 android {
-    compileSdkVersion 23
+    compileSdkVersion 30
     buildToolsVersion "23.0.1"
 
     defaultConfig {
-        minSdkVersion 16
-        targetSdkVersion 22
+        targetSdkVersion 34
         versionCode 1
         versionName "1.0"
         ndk {
@@ -20,6 +19,6 @@ android {
 }
 
 dependencies {
-    compile 'com.facebook.react:react-native:0.20.+'
+    implementation 'com.facebook.react:react-native:0.20.+'
 }
   
\ No newline at end of file
diff --git a/node_modules/react-native-file-provider/android/src/main/java/com/artirigo/fileprovider/MyFileProvider.java b/node_modules/react-native-file-provider/android/src/main/java/com/artirigo/fileprovider/MyFileProvider.java
new file mode 100644
index 0000000..a775b47
--- /dev/null
+++ b/node_modules/react-native-file-provider/android/src/main/java/com/artirigo/fileprovider/MyFileProvider.java
@@ -0,0 +1,8 @@
+package com.artirigo.fileprovider;
+
+//import android.support.v4.content.FileProvider;
+import androidx.core.content.FileProvider;
+
+public class MyFileProvider extends FileProvider {
+
+}
diff --git a/node_modules/react-native-file-provider/android/src/main/java/com/artirigo/fileprovider/RNFileProviderModule.java b/node_modules/react-native-file-provider/android/src/main/java/com/artirigo/fileprovider/RNFileProviderModule.java
index a9bc7d9..4e75b22 100644
--- a/node_modules/react-native-file-provider/android/src/main/java/com/artirigo/fileprovider/RNFileProviderModule.java
+++ b/node_modules/react-native-file-provider/android/src/main/java/com/artirigo/fileprovider/RNFileProviderModule.java
@@ -9,8 +9,13 @@ import com.facebook.react.bridge.Callback;
 
 import java.io.File;
 import android.net.Uri;
+import android.content.Intent;
+
+import android.content.pm.PackageManager;
+import android.content.pm.ApplicationInfo;
+import java.util.List;
+
 
-import android.support.v4.content.FileProvider;
 
 public class RNFileProviderModule extends ReactContextBaseJavaModule {
 
@@ -26,6 +31,22 @@ public class RNFileProviderModule extends ReactContextBaseJavaModule {
     return "RNFileProvider";
   }
 
+  /*
+  @ReactMethod
+  public void getListOfInstalledApps(Promise promise) {
+    String ret = "";
+    final PackageManager pm = reactContext.getPackageManager();
+    //get a list of installed apps.
+    List<ApplicationInfo> packages = pm.getInstalledApplications(PackageManager.GET_META_DATA);
+    for (ApplicationInfo packageInfo : packages) {
+        ret = ret + "Installed package :" + packageInfo.packageName+"\n";
+        //ret = ret + "Source dir : " + packageInfo.sourceDir+"\n";
+        //ret = ret + "Launch Activity :" + pm.getLaunchIntentForPackage(packageInfo.packageName)+"\n"; 
+    }
+    promise.resolve(ret);
+  }
+  */
+
   @ReactMethod
   public void getUriForFile(String authority, String filepath, Promise promise) {
     try {
@@ -34,7 +55,7 @@ public class RNFileProviderModule extends ReactContextBaseJavaModule {
       //
       File file = new File(filepath);
       if (!file.exists()) throw new Exception("File does not exist");
-      Uri contentUri = FileProvider.getUriForFile(this.getReactApplicationContext(), authority, file);
+      Uri contentUri = MyFileProvider.getUriForFile(this.getReactApplicationContext(), authority, file);
       promise.resolve(contentUri.toString());
     } catch (Exception ex) {
       ex.printStackTrace();
@@ -42,6 +63,52 @@ public class RNFileProviderModule extends ReactContextBaseJavaModule {
     }
   }
 
+  @ReactMethod
+  public void grantUriPermissionRW(String packageName, String uri, Promise promise) {
+    try {
+      //grant permision for app with specific package, e.g. before starting other app via intent
+      reactContext.getApplicationContext().grantUriPermission(packageName, Uri.parse(uri), Intent.FLAG_GRANT_WRITE_URI_PERMISSION | Intent.FLAG_GRANT_READ_URI_PERMISSION);
+      promise.resolve(null);
+    } catch (Exception ex) {
+      ex.printStackTrace();
+      reject(promise, uri, ex);
+    }
+  }
+
+  @ReactMethod
+  public void revokeUriPermissionRW(String uri, Promise promise) {
+    try {
+      reactContext.getApplicationContext().revokeUriPermission(Uri.parse(uri), Intent.FLAG_GRANT_WRITE_URI_PERMISSION | Intent.FLAG_GRANT_READ_URI_PERMISSION);
+      promise.resolve(null);
+    } catch (Exception ex) {
+      ex.printStackTrace();
+      reject(promise, uri, ex);
+    }
+  }
+
+  @ReactMethod
+  public void grantUriPermissionR(String packageName, String uri, Promise promise) {
+    try {
+      //grant permision for app with specific package, e.g. before starting other app via intent
+      reactContext.getApplicationContext().grantUriPermission(packageName, Uri.parse(uri), Intent.FLAG_GRANT_READ_URI_PERMISSION);
+      promise.resolve(null);
+    } catch (Exception ex) {
+      ex.printStackTrace();
+      reject(promise, uri, ex);
+    }
+  }
+
+  @ReactMethod
+  public void revokeUriPermissionR(String uri, Promise promise) {
+    try {
+      reactContext.getApplicationContext().revokeUriPermission(Uri.parse(uri), Intent.FLAG_GRANT_READ_URI_PERMISSION);
+      promise.resolve(null);
+    } catch (Exception ex) {
+      ex.printStackTrace();
+      reject(promise, uri, ex);
+    }
+  }
+
   private void reject(Promise promise, String filepath, Exception ex) {
     promise.reject(null, ex.getMessage());
   }
